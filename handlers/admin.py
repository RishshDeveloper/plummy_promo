"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ PlummyPromo  
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from datetime import datetime, timedelta
import asyncio
import io

from database.database import db
from utils.config import Config
from utils.analytics import AnalyticsHelper
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ main.py)
from utils.uptimerobot import uptime_manager


class AdminHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in Config.ADMIN_IDS
    
    @staticmethod
    async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ /stats)"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            error_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ"
            if update.callback_query:
                await update.callback_query.edit_message_text(error_text)
            else:
                await update.message.reply_text(error_text)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_7d = await db.analytics.get_traffic_stats(days=7)
            stats_30d = await db.analytics.get_traffic_stats(days=30)
            promo_stats = await db.promo.get_promo_stats()
            conversion_stats = await db.analytics.get_conversion_stats()
            total_users = await db.user.get_users_count()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            message = f"""<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PlummyPromo –±–æ—Ç–∞</b>

<b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (7 –¥–Ω–µ–π): {stats_7d.get('unique_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (30 –¥–Ω–µ–π): {stats_30d.get('unique_users', 0)}

<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {promo_stats.get('total_generated', 0)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo_stats.get('total_used', 0)}
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {promo_stats.get('usage_rate', 0)}%

<b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>
‚Ä¢ –°—Ç–∞—Ä—Ç ‚Üí –ü—Ä–æ–º–æ–∫–æ–¥: {conversion_stats.get('start_to_promo', 0)}%
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ ‚Üí –ü–æ–∫—É–ø–∫–∞: {conversion_stats.get('promo_to_purchase', 0)}%
‚Ä¢ –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_stats.get('overall_conversion', 0)}%"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            if stats_7d.get('daily_stats'):
                message += "\n\n<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π):</b>\n"
                for day_stat in stats_7d['daily_stats'][:5]:
                    date_str = str(day_stat['date'])
                    users_str = str(day_stat['unique_users'])
                    sessions_str = str(day_stat['sessions'])
                    message += f"‚Ä¢ {date_str}: {users_str} –ø–æ–ª—å–∑. ({sessions_str} —Å–µ—Å—Å–∏–π)\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            if stats_7d.get('traffic_by_source'):
                message += "\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ (7 –¥–Ω–µ–π):</b>\n"
                for source in stats_7d['traffic_by_source']:
                    source_name = str(source['source'])
                    users_count = str(source['users'])
                    message += f"‚Ä¢ {source_name}: {users_count} –ø–æ–ª—å–∑.\n"
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            keyboard_buttons = [
                [InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
                [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="admin_promo_manage")],
                [InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")],
                [InlineKeyboardButton("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞", callback_data="admin_monitoring")]
            ]
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            if update.callback_query:
                await update.callback_query.edit_message_text(error_text)
            else:
                await update.message.reply_text(error_text)
    
    @staticmethod
    async def admin_broadcast_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
            
        if not Config.BROADCAST_ENABLED:
            await update.callback_query.edit_message_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        users_count = await db.user.get_users_count()
        active_users = await db.user.get_all_active_users()
        
        broadcast_text = f"""
üì¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}  
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}
üîï –û—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {users_count - len(active_users)}

üìù **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:**
‚Ä¢ –ù–µ –±–æ–ª–µ–µ 1 —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–µ–Ω—å
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤ –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        
        await update.callback_query.edit_message_text(
            broadcast_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data['awaiting_broadcast'] = True
    
    
    
    
    
    
    @staticmethod  
    async def admin_promo_manage(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        promo_stats = await db.promo.get_promo_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_discount = await db.settings.get_promo_discount_percent()
        current_duration = await db.settings.get_promo_duration_days()
        
        manage_text = f"""
**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏**

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {promo_stats.get('total_generated', 0)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo_stats.get('total_used', 0)}  
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {promo_stats.get('usage_rate', 0)}%

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {current_discount}%
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {current_duration} –¥–Ω–µ–π
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 1 –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:**
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã.
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∏–¥–∫–∏", callback_data="admin_promo_settings")],
            [InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", callback_data="admin_promo_mark_used")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_back_to_main")]
        ])
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                manage_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                manage_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    
    @staticmethod
    async def admin_promo_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_discount = await db.settings.get_promo_discount_percent()
        current_duration = await db.settings.get_promo_duration_days()
        
        settings_text = f"""
**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**

**–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {current_discount}%
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {current_duration} –¥–Ω–µ–π

**–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**
–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–∞–º.

**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** 
–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìà –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏", callback_data="admin_set_discount")],
            [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="admin_set_duration")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_promo_manage")]
        ])
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - –ª–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                settings_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                settings_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    
    @staticmethod
    async def admin_set_discount(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        current_discount = await db.settings.get_promo_discount_percent()
        
        await update.callback_query.edit_message_text(
            f"""
**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏**

–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {current_discount}%

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 99):
            """,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_promo_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_discount'] = True
    
    @staticmethod
    async def admin_set_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        current_duration = await db.settings.get_promo_duration_days()
        
        await update.callback_query.edit_message_text(
            f"""
**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞**

–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {current_duration} –¥–Ω–µ–π

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö (–æ—Ç 1 –¥–æ 365):
            """,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_promo_settings")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_duration'] = True
    
    @staticmethod
    async def admin_list_unsynced(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        unsynced_codes = await db.promo.get_unsynced_promocodes()
        
        if unsynced_codes:
            unsynced_text = "üìã **–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**\n\n"
            
            for i, promo in enumerate(unsynced_codes[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                unsynced_text += f"{i}. `{promo['code']}` - {promo.get('sync_error', '–û—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n"
            
            if len(unsynced_codes) > 10:
                unsynced_text += f"\n... –∏ –µ—â–µ {len(unsynced_codes) - 10} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
        else:
            unsynced_text = "‚úÖ **–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã**\n\n–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å WooCommerce."
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_list_unsynced")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_woocommerce")]
        ])
        
        await update.callback_query.edit_message_text(
            unsynced_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def admin_promo_mark_used(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        await update.callback_query.edit_message_text(
            """
**–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º**

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π:

–ü—Ä–∏–º–µ—Ä: PLUMMYABC123
            """,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_promo_manage")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        context.user_data['waiting_for_promo_code'] = True
    
    @staticmethod
    async def handle_admin_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏
        if context.user_data.get('waiting_for_discount'):
            try:
                discount = int(text)
                if 1 <= discount <= 99:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    success = await db.settings.set_promo_discount_percent(discount)
                    
                    if success:
                        await update.message.reply_text(
                            f"**–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω**: {discount}%\n\n"
                            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n"
                            f"–°—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Å –ø—Ä–µ–∂–Ω–µ–π —Å–∫–∏–¥–∫–æ–π.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        await update.message.reply_text(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    context.user_data.pop('waiting_for_discount', None)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                    await AdminHandlers.admin_promo_settings(update, context)
                    return
                else:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99")
                    return
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        elif context.user_data.get('waiting_for_duration'):
            try:
                duration = int(text)
                if 1 <= duration <= 365:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    success = await db.settings.set_promo_duration_days(duration)
                    
                    if success:
                        await update.message.reply_text(
                            f"**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω**: {duration} –¥–Ω–µ–π\n\n"
                            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n"
                            f"–°—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–π –ø—Ä–µ–∂–Ω–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        await update.message.reply_text(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    context.user_data.pop('waiting_for_duration', None)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º  
                    await AdminHandlers.admin_promo_settings(update, context)
                    return
                else:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365")
                    return
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º
        elif context.user_data.get('waiting_for_promo_code'):
            promo_code = text.upper().strip()
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_msg = await update.message.reply_text(
                    f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}...",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                success = await db.promo.use_promo_code(promo_code)
                
                if success:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å WooCommerce
                    try:
                        from utils.woocommerce import woo_manager, Config
                        if Config.WOOCOMMERCE_ENABLED and woo_manager.is_enabled():
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            await asyncio.sleep(1)
                            
                            result_message = f"""**–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π**

‚úÖ **–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** –æ–±–Ω–æ–≤–ª–µ–Ω–∞
‚úÖ **–°–∞–π—Ç (WooCommerce):** —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω

–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ."""
                        else:
                            result_message = f"""**–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π**

‚úÖ **–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** –æ–±–Ω–æ–≤–ª–µ–Ω–∞
‚ö†Ô∏è **–°–∞–π—Ç (WooCommerce):** –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–º–µ—á–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ."""
                    except Exception as sync_error:
                        result_message = f"""**–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π**

‚úÖ **–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** –æ–±–Ω–æ–≤–ª–µ–Ω–∞
‚ùå **–°–∞–π—Ç (WooCommerce):** –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–û—à–∏–±–∫–∞: {str(sync_error)}"""
                    
                    await processing_msg.edit_text(
                        result_message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await processing_msg.edit_text(
                        f"**–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**",
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                context.user_data.pop('waiting_for_promo_code', None)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                await AdminHandlers.admin_promo_manage(update, context)
                return
                
            except Exception as e:
                await update.message.reply_text(
                    f"**–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:** {str(e)}",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
    
    @staticmethod
    async def admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
            
        if not context.user_data.get('awaiting_broadcast'):
            return
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['awaiting_broadcast'] = False
        
        message_text = update.message.text
        if not message_text:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = await db.user.get_all_active_users()
        
        if not active_users:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        confirm_text = f"""
üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**

üìù **–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{message_text}

üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_broadcast_{len(active_users)}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back_to_main")]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data['broadcast_text'] = message_text
        context.user_data['broadcast_users'] = active_users
        
        await update.message.reply_text(
            confirm_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def admin_execute_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        broadcast_text = context.user_data.get('broadcast_text')
        active_users = context.user_data.get('broadcast_users', [])
        
        if not broadcast_text or not active_users:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        await update.callback_query.edit_message_text(
            f"üì§ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        sent_count = 0
        failed_count = 0
        
        for user in active_users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"üì¢ **–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç {Config.SHOP_NAME}**\n\n{broadcast_text}",
                    parse_mode=ParseMode.MARKDOWN
                )
                sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await context.application.create_task_coro(lambda: None)
                
            except Exception as e:
                failed_count += 1
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        result_text = f"""
‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ ‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_count}
‚Ä¢ ‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(sent_count / len(active_users) * 100, 1)}%

–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {datetime.now().strftime('%H:%M:%S')}
        """
        
        await update.callback_query.edit_message_text(result_text, parse_mode=ParseMode.MARKDOWN)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data.pop('broadcast_text', None)
        context.user_data.pop('broadcast_users', None)
    
    @staticmethod
    async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ admin callback'–æ–≤"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "admin_broadcast":
            await AdminHandlers.admin_broadcast_setup(update, context)
        elif data == "admin_promo_manage":
            await AdminHandlers.admin_promo_manage(update, context)
        elif data == "admin_promo_settings":
            await AdminHandlers.admin_promo_settings(update, context)
        elif data == "admin_set_discount":
            await AdminHandlers.admin_set_discount(update, context)
        elif data == "admin_set_duration":
            await AdminHandlers.admin_set_duration(update, context)
        elif data == "admin_promo_mark_used":
            await AdminHandlers.admin_promo_mark_used(update, context)
        elif data.startswith("confirm_broadcast_"):
            await AdminHandlers.admin_execute_broadcast(update, context)
        elif data == "admin_notifications":
            await AdminHandlers.admin_notifications(update, context)
        elif data == "admin_notifications_start":
            await AdminHandlers.admin_notifications_start(update, context)
        elif data == "admin_notifications_stop":
            await AdminHandlers.admin_notifications_stop(update, context)
        elif data == "admin_notifications_test_5":
            await AdminHandlers.admin_notifications_test(update, context, 5)
        elif data == "admin_notifications_test_3":
            await AdminHandlers.admin_notifications_test(update, context, 3)
        elif data == "admin_notifications_test_1":
            await AdminHandlers.admin_notifications_test(update, context, 1)
        elif data == "admin_monitoring":
            await AdminHandlers.admin_monitoring(update, context)
        elif data == "admin_monitoring_start":
            await AdminHandlers.admin_monitoring_start(update, context)
        elif data == "admin_monitoring_stop":
            await AdminHandlers.admin_monitoring_stop(update, context)
        elif data == "admin_monitoring_test":
            await AdminHandlers.admin_monitoring_test(update, context)
        elif data == "admin_monitoring_details":
            await AdminHandlers.admin_monitoring_details(update, context)
        elif data == "admin_stats":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await AdminHandlers.admin_stats(update, context)
        elif data == "admin_back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await AdminHandlers.admin_stats(update, context)
    
    @staticmethod
    async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º")
            return
        
        help_text = """
üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å PlummyPromo**

üìä **–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/admin_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì¢ **–†–∞—Å—Å—ã–ª–∫–∏:**
‚Ä¢ –ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ /stats
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üéÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –≤ .env —Ñ–∞–π–ª–µ
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ (UTM –º–µ—Ç–∫–∏)
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

‚ùì –í–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ README.md
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    # === –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ê–ô–¢–ê ===
    
    @staticmethod
    async def admin_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            await update.callback_query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ"
            )
            return
        
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            from utils.notifications import notification_system
            
            if not notification_system:
                await update.callback_query.edit_message_text(
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            stats = await notification_system.get_notification_stats()
            
            status_text = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if stats.get('is_running', False) else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
            
            message = f"""**–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö**

**–°—Ç–∞—Ç—É—Å:** {status_text}
**–†–µ–∂–∏–º:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω)

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats.get('total_active_promos', 0)}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 5 –¥–Ω–µ–π: {stats.get('notifications_5_days', 0)}  
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 3 –¥–Ω—è: {stats.get('notifications_3_days', 0)}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 1 –¥–µ–Ω—å: {stats.get('notifications_1_day', 0)}

**–¢–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π):**

**–ó–∞ 5 –¥–Ω–µ–π:**
_–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
–£—Å–ø–µ–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏!
<a href="http://plummy.ru/?utm_source=telegram&utm_medium=social&utm_campaign=bot">Plummy.ru</a>_

**–ó–∞ 3 –¥–Ω—è:**
_–ü–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –°–ê–ú–´–ï –ù–ò–ó–ö–ò–ï —Ü–µ–Ω—ã –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—â–∏._

**–ó–∞ 1 –¥–µ–Ω—å:**
_–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!
<a href="http://plummy.ru/?utm_source=telegram&utm_medium=social&utm_campaign=bot">Plummy.ru</a>_

‚ÑπÔ∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏, –∫—Ä–æ–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ã.**"""

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ë–ï–ó –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
            keyboard_buttons = [
                [InlineKeyboardButton("üß™ –¢–µ—Å—Ç (5 –¥–Ω.)", callback_data="admin_notifications_test_5"),
                 InlineKeyboardButton("üß™ –¢–µ—Å—Ç (3 –¥–Ω.)", callback_data="admin_notifications_test_3"),
                 InlineKeyboardButton("üß™ –¢–µ—Å—Ç (1 –¥–Ω.)", callback_data="admin_notifications_test_1")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_notifications")],
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_stats")]
            ]
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
            )
    
    @staticmethod
    async def admin_notifications_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        await update.callback_query.answer("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await AdminHandlers.admin_notifications(update, context)
    
    @staticmethod 
    async def admin_notifications_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        await update.callback_query.answer("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
        await AdminHandlers.admin_notifications(update, context)
    
    @staticmethod
    async def admin_notifications_test(update: Update, context: ContextTypes.DEFAULT_TYPE, notification_type: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            from utils.notifications import notification_system
            
            if notification_system:
                success = await notification_system.send_test_notification(
                    user_id=update.effective_user.id,
                    notification_type=notification_type
                )
                
                if success:
                    await update.callback_query.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {notification_type} –¥–Ω. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", show_alert=True)
                else:
                    await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", show_alert=True)
            else:
                await update.callback_query.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
                
        except Exception as e:
            await update.callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @staticmethod
    async def admin_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∞–π—Ç–∞"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from utils.monitoring import site_monitoring
        
        if not site_monitoring:
            await update.callback_query.edit_message_text(
                "‚ùå **–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞**\n\n"
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        status = await site_monitoring.get_monitoring_status()
        
        if not status['enabled']:
            message = (
                "‚ùå **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                f"–û—à–∏–±–∫–∞: {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UptimeRobot –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_back_to_main")]
            ])
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if status['is_monitoring'] else "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            api_status = "‚úÖ OK" if status['api_status'] == 'OK' else f"‚ùå {status['api_status']}"
            
            message = (
                f"üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞**\n\n"
                f"**–°—Ç–∞—Ç—É—Å:** {monitoring_status}\n"
                f"**API UptimeRobot:** {api_status}\n"
                f"**–ú–æ–Ω–∏—Ç–æ—Ä–æ–≤:** {status['monitors_count']}\n"
                f"**–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {status['check_interval']} —Å–µ–∫\n"
                f"**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {status['notification_count']}\n"
            )
            
            if status['last_check']:
                message += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {status['last_check'][:19]}\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö
            if status['monitors']:
                message += "\n**–ú–æ–Ω–∏—Ç–æ—Ä—ã:**\n"
                for monitor in status['monitors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    status_icon = "üü¢" if monitor['is_up'] else "üî¥"
                    message += f"{status_icon} {monitor['friendly_name']}\n"
                
                if len(status['monitors']) > 3:
                    message += f"... –∏ –µ—â–µ {len(status['monitors']) - 3}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status['is_monitoring']:
                keyboard_buttons = [
                    [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring_stop")],
                    [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="admin_monitoring_details")],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring")]
                ]
            else:
                keyboard_buttons = [
                    [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring_start")],
                    [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="admin_monitoring_test")],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring")]
                ]
                
            keyboard_buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")])
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def admin_monitoring_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from utils.monitoring import site_monitoring
            
        if not site_monitoring:
            await update.callback_query.edit_message_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞
        await update.callback_query.edit_message_text(
            "üöÄ **–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        success = await site_monitoring.start_monitoring()
        
        if success:
            message = (
                "‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π—Ç–∞.\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
            )
        else:
            message = (
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UptimeRobot API."
            )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring")]
        ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def admin_monitoring_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from utils.monitoring import site_monitoring
            
        if not site_monitoring:
            return
        
        await update.callback_query.edit_message_text(
            "üõë **–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        success = await site_monitoring.stop_monitoring()
        
        if success:
            message = (
                "‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π—Ç–∞.\n"
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç."
            )
        else:
            message = (
                "‚ùå **–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring")]
        ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def admin_monitoring_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UptimeRobot"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        await update.callback_query.edit_message_text(
            "üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...**\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å UptimeRobot API...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        test_result = await uptime_manager.test_connection()
        
        if test_result['success']:
            message = (
                f"‚úÖ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"**–°—Ç–∞—Ç—É—Å API:** –†–∞–±–æ—Ç–∞–µ—Ç\n"
                f"**–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:** {test_result.get('monitors_count', 0)}\n\n"
                f"{test_result.get('message', '')}"
            )
        else:
            message = (
                f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n"
                f"**–ü—Ä–æ–±–ª–µ–º–∞:** {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
                f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UptimeRobot"
            )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring")]
        ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod 
    async def admin_monitoring_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
        if not AdminHandlers.is_admin(update.effective_user.id):
            return
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from utils.monitoring import site_monitoring
            
        if not site_monitoring:
            return
        
        status = await site_monitoring.get_monitoring_status()
        recent_notifications = await site_monitoring.get_recent_notifications(5)
        
        message = f"üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö
        if status['monitors']:
            message += "**–ú–æ–Ω–∏—Ç–æ—Ä—ã:**\n"
            for monitor in status['monitors']:
                status_icon = "üü¢" if monitor['is_up'] else "üî¥"
                uptime = monitor.get('uptime_ratio', '0')
                message += (
                    f"{status_icon} **{monitor['friendly_name']}**\n"
                    f"   URL: `{monitor['url']}`\n"
                    f"   –°—Ç–∞—Ç—É—Å: {monitor['status_description']}\n"
                    f"   Uptime: {uptime}%\n\n"
                )
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if recent_notifications:
            message += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
            for notif in recent_notifications[-3:]:
                timestamp = notif['timestamp'].strftime('%H:%M:%S')
                message += f"‚Ä¢ {timestamp}: {notif['friendly_name']} -> {notif['status_change']['current_status']}\n"
        else:
            message += "**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç**\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring_details")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", callback_data="admin_monitoring")]
        ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
