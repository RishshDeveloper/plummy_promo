"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è PlummyPromo
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from telegram import Bot
from telegram.constants import ParseMode

from database.database import db
from utils.config import Config
from utils.woocommerce import woo_manager
from utils.media import media_manager

logger = logging.getLogger(__name__)


class PromoNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot
        """
        self.bot = bot
        self.is_running = False
        self.check_interval = 3600  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
        self.notification_schedule = {
            5: {  # –ó–∞ 5 –¥–Ω–µ–π
                'text': """–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
–£—Å–ø–µ–π—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏!
<a href="http://plummy.ru/?utm_source=telegram&utm_medium=social&utm_campaign=bot">Plummy.ru</a>""",
                'field_sent': 'notification_5_days_sent',
                'field_date': 'notification_5_days_date'
            },
            3: {  # –ó–∞ 3 –¥–Ω—è
                'text': """–ü–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –°–ê–ú–´–ï –ù–ò–ó–ö–ò–ï —Ü–µ–Ω—ã –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—â–∏.""",
                'field_sent': 'notification_3_days_sent', 
                'field_date': 'notification_3_days_date'
            },
            1: {  # –ó–∞ 1 –¥–µ–Ω—å
                'text': """–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!
<a href="http://plummy.ru/?utm_source=telegram&utm_medium=social&utm_campaign=bot">Plummy.ru</a>""",
                'field_sent': 'notification_1_day_sent',
                'field_date': 'notification_1_day_date'
            }
        }
        
        # –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        self.feedback_request_text = """–ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –≤—ã –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ø–æ—á–µ–º—É –≤—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —É –Ω–∞—Å –∑–∞–∫–∞–∑ –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ."""
        
        logger.info("üì± PromoNotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_notifications(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(self._notification_loop())
    
    async def stop_notifications(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.is_running = False
        logger.info("‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval} —Å–µ–∫)")
        
        while self.is_running:
            try:
                await self._check_and_send_notifications()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                await asyncio.sleep(60)
    
    async def _check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ) –ø—Ä–æ–º–æ–∫–æ–¥—ã
            active_promos = await self._get_active_promocodes()
            
            if not active_promos:
                logger.info("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(active_promos)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
            
            notifications_sent = 0
            
            for promo in active_promos:
                try:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å WooCommerce
                    if not await self._validate_promo_before_notification(promo):
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    sent_count = await self._process_promo_notifications(promo)
                    notifications_sent += sent_count
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo.get('code', 'UNKNOWN')}: {e}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await self._check_and_send_feedback_requests()
            
            if notifications_sent > 0:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}")
            else:
                logger.info("üì≠ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
    
    async def _get_active_promocodes(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        try:
            async with db.manager.get_connection() as conn:
                cursor = await conn.execute("""
                    SELECT p.*, u.notifications_enabled, u.is_blocked
                    FROM promocodes p
                    JOIN users u ON p.user_id = u.user_id
                    WHERE p.is_used = 0 
                    AND u.notifications_enabled = 1 
                    AND u.is_blocked = 0
                    ORDER BY p.created_date ASC
                """)
                rows = await cursor.fetchall()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                columns = [description[0] for description in cursor.description]
                return [dict(zip(columns, row)) for row in rows]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
            return []
    
    async def _validate_promo_before_notification(self, promo: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å WooCommerce –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        """
        try:
            # –ï—Å–ª–∏ WooCommerce –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–∞–π—Ç–µ
            if Config.WOOCOMMERCE_ENABLED and woo_manager.is_enabled():
                try:
                    sync_result = await woo_manager.sync_coupon_status(
                        promo['code'], 
                        promo.get('woocommerce_id')
                    )
                    
                    if not sync_result.get('synced', False):
                        # –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ
                        error_msg = sync_result.get('error', '').lower()
                        if '–Ω–µ –Ω–∞–π–¥–µ–Ω' in error_msg or 'not found' in error_msg:
                            logger.info(f"üóëÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ {promo['code']} —É–¥–∞–ª–µ–Ω —Å —Å–∞–π—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                            await db.promo.use_promo_code(promo['code'])
                            return False
                    
                    if sync_result.get('is_used', False):
                        # –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ
                        logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo['code']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π
                        await db.promo.use_promo_code(promo['code'])
                        return False
                        
                except Exception as e:
                    # –ï—Å–ª–∏ WooCommerce –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å WooCommerce –¥–ª—è {promo['code']}: {e}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–º–æ–∫–æ–¥ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
            if promo['is_used']:
                logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo['code']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo.get('code', 'UNKNOWN')}: {e}")
            return False
    
    async def _process_promo_notifications(self, promo: Dict) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        notifications_sent = 0
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            created_date = datetime.strptime(promo['created_date'][:19], "%Y-%m-%d %H:%M:%S")
            duration_days = await db.settings.get_promo_duration_days()
            expiry_date = created_date + timedelta(days=duration_days)
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—Ç–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if datetime.now() >= expiry_date:
                logger.info(f"‚è∞ –ü—Ä–æ–º–æ–∫–æ–¥ {promo['code']} –∏—Å—Ç–µ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for days_before, notification_config in self.notification_schedule.items():
                notification_date = expiry_date - timedelta(days=days_before)
                
                # –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—à–ª–æ?
                if datetime.now() >= notification_date:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if not promo[notification_config['field_sent']]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        success = await self._send_notification(
                            promo,
                            notification_config,
                            expiry_date
                        )
                        
                        if success:
                            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            await self._mark_notification_sent(
                                promo['code'],
                                notification_config['field_sent'],
                                notification_config['field_date']
                            )
                            notifications_sent += 1
            
            return notifications_sent
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {promo.get('code', 'UNKNOWN')}: {e}")
            return 0
    
    async def _send_notification(self, promo: Dict, config: Dict, expiry_date: datetime) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            promo: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            expiry_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            user_id = promo['user_id']
            promo_code = promo['code']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = config['text']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def _mark_notification_sent(self, promo_code: str, sent_field: str, date_field: str):
        """–ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        try:
            async with db.manager.get_connection() as conn:
                await conn.execute(f"""
                    UPDATE promocodes 
                    SET {sent_field} = 1, {date_field} = ?
                    WHERE code = ?
                """, (datetime.now().isoformat(), promo_code))
                await conn.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def get_notification_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            async with db.manager.get_connection() as conn:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                cursor = await conn.execute("""
                    SELECT 
                        COUNT(*) as total_active_promos,
                        SUM(notification_5_days_sent) as notifications_5_days,
                        SUM(notification_3_days_sent) as notifications_3_days,
                        SUM(notification_1_day_sent) as notifications_1_day
                    FROM promocodes 
                    WHERE is_used = 0
                """)
                row = await cursor.fetchone()
                
                if row:
                    return {
                        'total_active_promos': row[0] or 0,
                        'notifications_5_days': row[1] or 0,
                        'notifications_3_days': row[2] or 0, 
                        'notifications_1_day': row[3] or 0,
                        'is_running': self.is_running
                    }
                else:
                    return {
                        'total_active_promos': 0,
                        'notifications_5_days': 0,
                        'notifications_3_days': 0,
                        'notifications_1_day': 0,
                        'is_running': self.is_running
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {
                'error': str(e),
                'is_running': self.is_running
            }
    
    async def send_test_notification(self, user_id: int, notification_type: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5, 3 –∏–ª–∏ 1)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if notification_type not in self.notification_schedule:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
            return False
        
        try:
            config = self.notification_schedule[notification_type]
            
            test_message = f"üß™ **–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï** (–∑–∞ {notification_type} –¥–Ω.)\n\n" + config['text']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
            await self.bot.send_message(
                chat_id=user_id,
                text=test_message,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–∏–ø {notification_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def _check_and_send_feedback_requests(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
        
        try:
            async with db.manager.get_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ –∏ –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
                # –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                cursor = await conn.execute("""
                    SELECT p.*, u.notifications_enabled, u.is_blocked
                    FROM promocodes p
                    JOIN users u ON p.user_id = u.user_id
                    WHERE p.is_used = 0 
                    AND p.feedback_requested = 0
                    AND u.notifications_enabled = 1 
                    AND u.is_blocked = 0
                    ORDER BY p.created_date ASC
                """)
                rows = await cursor.fetchall()
                
                columns = [description[0] for description in cursor.description]
                expired_promos = [dict(zip(columns, row)) for row in rows]
                
                if not expired_promos:
                    logger.info("üì≠ –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
                    return
                
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(expired_promos)} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                
                feedback_requests_sent = 0
                
                for promo in expired_promos:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫
                        created_date = datetime.strptime(promo['created_date'][:19], "%Y-%m-%d %H:%M:%S")
                        duration_days = await db.settings.get_promo_duration_days()
                        expiry_date = created_date + timedelta(days=duration_days)
                        
                        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                        if datetime.now() > expiry_date:
                            success = await self._send_feedback_request(promo)
                            if success:
                                feedback_requests_sent += 1
                    
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo.get('code', 'UNKNOWN')}: {e}")
                        continue
                
                if feedback_requests_sent > 0:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {feedback_requests_sent}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}", exc_info=True)
    
    async def _send_feedback_request(self, promo: Dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            promo: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            user_id = promo['user_id']
            promo_code = promo['code']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await self.bot.send_message(
                chat_id=user_id,
                text=self.feedback_request_text,
                parse_mode=ParseMode.HTML
            )
            
            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            async with db.manager.get_connection() as conn:
                await conn.execute("""
                    UPDATE promocodes 
                    SET feedback_requested = 1, feedback_request_date = ?
                    WHERE code = ?
                """, (datetime.now().isoformat(), promo_code))
                await conn.commit()
            
            logger.info(f"üì§ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo_code}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
notification_system: Optional[PromoNotificationSystem] = None
