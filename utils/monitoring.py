"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

from telegram import Bot
from telegram.constants import ParseMode

from .config import Config
from .uptimerobot import uptime_manager

logger = logging.getLogger(__name__)


class SiteMonitoring:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
        self.admin_id = Config.ADMIN_ID
        self.check_interval = Config.UPTIMEROBOT_CHECK_INTERVAL
        self.monitoring_task = None
        self.is_monitoring = False
        self.notification_history = []  # –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.last_notification_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
    async def start_monitoring(self) -> bool:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not uptime_manager.is_enabled():
            logger.error("‚ùå UptimeRobot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
            return False
            
        if self.is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = await uptime_manager.test_connection()
        if not test_result['success']:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ UptimeRobot: {test_result.get('error')}")
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self._send_admin_notification(
            "üöÄ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ –∑–∞–ø—É—â–µ–Ω**\n\n"
            f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UptimeRobot: –∞–∫—Ç–∏–≤–Ω–æ\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {test_result.get('monitors_count', 0)}\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_task = asyncio.create_task(self._monitoring_loop())
        self.is_monitoring = True
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        return True
    
    async def stop_monitoring(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_monitoring:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        self.is_monitoring = False
        
        if self.monitoring_task and not self.monitoring_task.done():
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
                
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self._send_admin_notification(
            "üõë **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
        )
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
        
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        while self.is_monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                changes = await uptime_manager.check_for_status_changes()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for change in changes:
                    await self._handle_status_change(change)
                    
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except asyncio.CancelledError:
                logger.info("üõë –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                await asyncio.sleep(min(30, self.check_interval))
    
    async def _handle_status_change(self, change: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        Args:
            change: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        """
        monitor_id = change['monitor_id']
        friendly_name = change['friendly_name']
        current_status = change['current_status']
        is_critical = change['is_critical']
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        logger.info(
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {friendly_name} -> {current_status}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        now = datetime.now()
        if monitor_id in self.last_notification_time:
            last_notification = self.last_notification_time[monitor_id]
            if now - last_notification < timedelta(minutes=5):
                logger.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {friendly_name} (–Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)")
                return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if current_status == 'DOWN':
            icon = "üî¥"
            title = "–°–ê–ô–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù"
            urgency = "**–ö–†–ò–¢–ò–ß–ù–û**"
        else:
            icon = "üü¢"
            title = "–°–ê–ô–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù" 
            urgency = "**–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï**"
            
        message = (
            f"{icon} **{title}**\n\n"
            f"{urgency}\n\n"
            f"üìä **–ú–æ–Ω–∏—Ç–æ—Ä:** {friendly_name}\n"
            f"üåê **URL:** `{change['url']}`\n"
            f"üìà **–°—Ç–∞—Ç—É—Å:** {change['status_description']}\n"
            f"üïê **–í—Ä–µ–º—è:** {change['change_time'].strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
        
        if current_status == 'DOWN':
            message += "\n‚ùóÔ∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞."
        else:
            message += "\n‚úÖ **–°–∞–π—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.** –ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞."
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self._send_admin_notification(message, urgent=is_critical)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notification_history.append({
            'timestamp': now,
            'monitor_id': monitor_id,
            'friendly_name': friendly_name,
            'status_change': change,
            'message': message
        })
        
        self.last_notification_time[monitor_id] = now
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
        if len(self.notification_history) > 100:
            self.notification_history = self.notification_history[-100:]
    
    async def _send_admin_notification(self, message: str, urgent: bool = False):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            urgent: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã–º
        """
        try:
            if urgent:
                # –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                message = f"üö® **–°–†–û–ß–ù–û** üö®\n\n{message}"
            
            await self.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {self.admin_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
    
    async def get_monitoring_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        if not uptime_manager.is_enabled():
            return {
                "enabled": False,
                "error": "UptimeRobot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        monitors_status = await uptime_manager.get_monitor_status()
        
        return {
            "enabled": True,
            "is_monitoring": self.is_monitoring,
            "check_interval": self.check_interval,
            "admin_id": self.admin_id,
            "monitors": monitors_status.get('monitors', []) if monitors_status['success'] else [],
            "monitors_count": len(monitors_status.get('monitors', [])) if monitors_status['success'] else 0,
            "last_check": monitors_status.get('check_time') if monitors_status['success'] else None,
            "notification_count": len(self.notification_history),
            "api_status": "OK" if monitors_status['success'] else monitors_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        }
    
    async def get_recent_notifications(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return self.notification_history[-limit:] if self.notification_history else []
    
    def get_status_summary(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        """
        if not uptime_manager.is_enabled():
            return "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        if not self.is_monitoring:
            return "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        return "üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
        

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ main.py –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
site_monitoring = None
