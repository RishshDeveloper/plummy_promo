"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏ –±–æ—Ç–∞ PlummyPromo
"""

import os
import logging
from pathlib import Path
from typing import Optional
from telegram import Bot, Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class MediaManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–¥–∏–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        self.project_root = Path(__file__).parent.parent
        self.media_path = self.project_root / "assets" / "media"
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        self.image_mapping = {
            'hello': 'Hello.png',      # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
            'promo': 'promo.png',      # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥  
            'done': 'done.png',        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥
            'finish': 'finish.png',    # –°—Ä–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫
            'help': 'help.png'         # –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        }
        
        logger.info(f"üìÅ MediaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—É—Ç—å –∫ –º–µ–¥–∏–∞: {self.media_path}")
        self._validate_media_files()
    
    def _validate_media_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
        missing_files = []
        
        for event, filename in self.image_mapping.items():
            file_path = self.media_path / filename
            if not file_path.exists():
                missing_files.append(f"{event}: {filename}")
                logger.error(f"‚ùå –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            else:
                logger.info(f"‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {filename}")
        
        if missing_files:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        else:
            logger.info("‚úÖ –í—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    def get_media_path(self, event: str) -> Optional[Path]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (hello, promo, done, finish, help, faq)
            
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if event not in self.image_mapping:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
            return None
        
        filename = self.image_mapping[event]
        file_path = self.media_path / filename
        
        if not file_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
            
        return file_path
    
    async def send_photo_with_text(self, 
                                 update: Update, 
                                 event: str, 
                                 text: str,
                                 parse_mode: str = None,
                                 reply_markup = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            update: Update –æ–±—ä–µ–∫—Ç –æ—Ç Telegram
            event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            photo_path = self.get_media_path(event)
            
            if not photo_path:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(photo_path, 'rb') as photo_file:
                await update.message.reply_photo(
                    photo=photo_file,
                    caption=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                
            logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event}': {photo_path.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event}': {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            try:
                await update.message.reply_text(
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                return True
            except Exception as text_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(text_error)}")
                return False
    
    async def send_photo_to_chat(self,
                               bot: Bot,
                               chat_id: int,
                               event: str,
                               text: str,
                               parse_mode: str = None,
                               reply_markup = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        
        Args:
            bot: Bot –æ–±—ä–µ–∫—Ç
            chat_id: ID —á–∞—Ç–∞
            event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è  
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            photo_path = self.get_media_path(event)
            
            if not photo_path:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(photo_path, 'rb') as photo_file:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                
            logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            try:
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                return True
            except Exception as text_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç {chat_id}: {str(text_error)}")
                return False
    
    def list_available_media(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        """
        media_info = {}
        
        for event, filename in self.image_mapping.items():
            file_path = self.media_path / filename
            media_info[event] = {
                'filename': filename,
                'path': str(file_path),
                'exists': file_path.exists(),
                'size': file_path.stat().st_size if file_path.exists() else 0
            }
        
        return media_info


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–¥–∏–∞
media_manager = MediaManager()
